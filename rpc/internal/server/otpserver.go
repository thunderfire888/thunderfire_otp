// Code generated by goctl. DO NOT EDIT!
// Source: otp.proto

package server

import (
	"context"
	"github.com/thunderfire888/thunderfire_otp/rpc/otpclient"
	"google.golang.org/grpc/health/grpc_health_v1"

	"github.com/thunderfire888/thunderfire_otp/rpc/internal/logic"
	"github.com/thunderfire888/thunderfire_otp/rpc/internal/svc"
)

type OtpServer struct {
	svcCtx *svc.ServiceContext
}

func NewOtpServer(svcCtx *svc.ServiceContext) *OtpServer {
	return &OtpServer{
		svcCtx: svcCtx,
	}
}

func (s *OtpServer) Check(ctx context.Context, req *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	return &grpc_health_v1.HealthCheckResponse{
		Status: grpc_health_v1.HealthCheckResponse_SERVING,
	}, nil
}

func (s *OtpServer) Watch(req *grpc_health_v1.HealthCheckRequest, w grpc_health_v1.Health_WatchServer) error {
	return nil
}

func (s *OtpServer) GenOtp(ctx context.Context, in *otpclient.OtpGenRequest) (*otpclient.OtpGenResponse, error) {
	l := logic.NewGenOtpLogic(ctx, s.svcCtx)
	return l.GenOtp(in)
}

func (s *OtpServer) Validate(ctx context.Context, in *otpclient.OtpVaildRequest) (*otpclient.OtpVaildResponse, error) {
	l := logic.NewValidateLogic(ctx, s.svcCtx)
	return l.Validate(in)
}
